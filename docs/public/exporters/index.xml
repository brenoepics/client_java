<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exporters on client_java</title>
    <link>http://localhost:1313/exporters/</link>
    <description>Recent content in Exporters on client_java</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/exporters/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Formats</title>
      <link>http://localhost:1313/exporters/formats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/exporters/formats/</guid>
      <description>All exporters the following exposition formats:&#xA;OpenMetrics text format Prometheus text format Prometheus protobuf format Moreover, gzip encoding is supported for each of these formats.&#xA;Scraping with a Prometheus server The Prometheus server sends an Accept header to specify which format is requested. By default, the Prometheus server will scrape OpenMetrics text format with gzip encoding. If the Prometheus server is started with --enable-feature=native-histograms, it will scrape Prometheus protobuf format instead.</description>
    </item>
    <item>
      <title>Filter</title>
      <link>http://localhost:1313/exporters/filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/exporters/filter/</guid>
      <description>All exporters support a name[] URL parameter for querying only specific metric names. Examples:&#xA;/metrics?name[]=jvm_threads_current will query the metric named jvm_threads_current. /metrics?name[]=jvm_threads_current&amp;amp;name[]=jvm_threads_daemon will query two metrics, jvm_threads_current and jvm_threads_daemon. Add the following to the scape job configuration in prometheus.yml to make the Prometheus server send the name[] parameter:&#xA;params: name[]: - jvm_threads_current - jvm_threads_daemon </description>
    </item>
    <item>
      <title>HTTPServer</title>
      <link>http://localhost:1313/exporters/httpserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/exporters/httpserver/</guid>
      <description>The HTTPServer is a standalone server for exposing a metric endpoint. A minimal example application for HTTPServer can be found in the examples directory.&#xA;HTTPServer server = HTTPServer.builder() .port(9400) .buildAndStart(); By default, HTTPServer binds to any IP address, you can change this with hostname() or inetAddress().&#xA;HTTPServer is configured with three endpoints:&#xA;/metrics for Prometheus scraping. /-/healthy for simple health checks. / the default handler is a static HTML page. The default handler can be changed with defaultHandler().</description>
    </item>
    <item>
      <title>Servlet</title>
      <link>http://localhost:1313/exporters/servlet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/exporters/servlet/</guid>
      <description>The PrometheusMetricsServlet is a Jakarta Servlet for exposing a metric endpoint.&#xA;web.xml The old-school way of configuring a servlet is in a web.xml file:&#xA;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;web-app xmlns=&amp;#34;https://jakarta.ee/xml/ns/jakartaee&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&amp;#34; version=&amp;#34;5.0&amp;#34;&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;prometheus-metrics&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;io.prometheus.metrics.exporter.servlet.jakarta.PrometheusMetricsServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;prometheus-metrics&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/metrics&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;/web-app&amp;gt; Programmatic Today, most Servlet applications use an embedded Servlet container and configure Servlets programmatically rather than via web.xml. The API for that depends on the Servlet container. The examples directory has an example of an embedded Tomcat container with the PrometheusMetricsServlet configured.</description>
    </item>
    <item>
      <title>Spring</title>
      <link>http://localhost:1313/exporters/spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/exporters/spring/</guid>
      <description>Alternative: Use Spring&amp;rsquo;s Built-in Metrics Library Spring Boot has a built-in metric library named Micrometer, which supports Prometheus exposition format and can be set up in three simple steps:&#xA;Add the org.springframework.boot:spring-boot-starter-actuator dependency. Add the io.micrometer:micrometer-registry-prometheus as a runtime dependency. Enable the Prometheus endpoint by adding the line management.endpoints.web.exposure.include=prometheus to application.properties. Note that Spring&amp;rsquo;s default Prometheus endpoint is /actuator/prometheus, not /metrics.&#xA;In most cases the built-in Spring metrics library will work for you and you don&amp;rsquo;t need the Prometheus Java library in Spring applications.</description>
    </item>
  </channel>
</rss>
