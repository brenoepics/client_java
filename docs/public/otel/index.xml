<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenTelemetry on client_java</title>
    <link>http://localhost:1313/otel/</link>
    <description>Recent content in OpenTelemetry on client_java</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/otel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OTLP</title>
      <link>http://localhost:1313/otel/otlp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/otel/otlp/</guid>
      <description>The Prometheus Java client library allows you to push metrics to an OpenTelemetry endpoint using the OTLP protocol.&#xA;To implement this, you need to include prometheus-metrics-exporter as a dependency&#xA;Gradle implementation &amp;#39;io.prometheus:prometheus-metrics-exporter-opentelemetry:1.0.0&amp;#39; Maven &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.prometheus&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;prometheus-metrics-exporter-opentelemetry&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Initialize the OpenTelemetryExporter in your Java code:&#xA;OpenTelemetryExporter.builder() // optional: call configuration methods here .buildAndStart(); By default, the OpenTelemetryExporter will push metrics every 60 seconds to localhost:4317 using grpc protocol. You can configure this in code using the OpenTelemetryExporter.</description>
    </item>
    <item>
      <title>Tracing</title>
      <link>http://localhost:1313/otel/tracing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/otel/tracing/</guid>
      <description>OpenTelemetryâ€™s vision statement says that telemetry should be loosely coupled, allowing end users to pick and choose from the pieces they want without having to bring in the rest of the project, too. In that spirit, you might choose to instrument your Java application with the Prometheus Java client library for metrics, and attach the OpenTelemetry Java agent to get distributed tracing.&#xA;First, if you attach the OpenTelemetry Java agent you might want to turn off OTel&amp;rsquo;s built-in metrics, because otherwise you get metrics from both the Prometheus Java client library and the OpenTelemetry agent (technically it&amp;rsquo;s no problem to get both metrics, it&amp;rsquo;s just not a common use case).</description>
    </item>
    <item>
      <title>Names</title>
      <link>http://localhost:1313/otel/names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/otel/names/</guid>
      <description>OpenTelemetry naming conventions are different from Prometheus naming conventions. The mapping from OpenTelemetry metric names to Prometheus metric names is well defined in OpenTelemetry&amp;rsquo;s Prometheus and OpenMetrics Compatibility spec, and the OpenTelemetryExporter implements that specification.&#xA;The goal is, if you set up a pipeline as illustrated below, you will see the same metric names in the Prometheus server as if you had exposed Prometheus metrics directly.&#xA;The main steps when converting OpenTelemetry metric names to Prometheus metric names are:</description>
    </item>
  </channel>
</rss>
